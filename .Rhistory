mutate(current_op = case_when(
end_date < Sys.Date() ~ FALSE,
TRUE ~ TRUE))
View(configuration)
ls(package:sf)
st_crs(configuration)
# I think configuration is good to here.
sites <- configuration
integrated_sites <- sites %>%
filter(integrated_contract)
View(site_meta)
# I think configuration is good to here.
sites <- configuration %>%
inner_join(site_meta, by = c('site_code' = 'site'))
integrated_sites <- sites %>%
filter(integrated_contract)
# I think configuration is good to here. already has POINT geom w/ CRS of 4326. Missing info from site_meta.
sites <- configuration %>%
inner_join(site_meta, by = c('site_code' = 'site'))
integrated_sites <- sites %>%
filter(integrated_contract)
operational_sites <- sites %>%
filter(operational)
ptagis_ops <- sites %>%
filter(current_op)
View(sites)
names(sites)
View(site_meta)
glimpse(site_meta)
# I think configuration is good to here. already has POINT geom w/ CRS of 4326. Missing info from site_meta.
sites <- configuration %>%
inner_join(site_meta, by = c('site_code' = 'site'))
integrated_sites <- sites %>%
filter(integrated_contract)
operational_sites <- sites %>%
filter(operational)
# load data points
load('./data/inputs/steelhead_gis_data.rda')
# transform to WGS84 for leaflet map
sthd_critical_WGS84 <- sthd_critical %>%
st_transform('EPSG:4326')
sthd_extant_WGS84 <- sthd_extant %>%
group_by(SPECIES, RUN_TIMING, ESU_DPS, MPG, POP_NAME, TRT_POPID, POP_TYPE, ACCESS_POP) %>%
summarise(SHAPE_Area = sum(SHAPE_Area)) %>%
#filter(ACCESS_HUC == 'accessible') %>%
filter(TRT_POPID != 'CRNFC-s') %>%
st_transform('EPSG:4326')
sthd_spawn_WGS84 <- sthd_spawn %>%
st_transform('EPSG:4326')
# set colors
sth_col <- colorFactor(palette = 'viridis', domain = sthd_extant_WGS84$MPG)
spawn_col <- colorFactor(palette = c('skyblue','navy'), domain = sthd_spawn_WGS84$TYPE, reverse = TRUE)
funding_col <- colorFactor(palette = 'Dark2', domain = sites$BPA_funded)
tier_col <- colorFactor(c('firebrick', 'darkorange', 'gold'), domain = sites$pop_tier)
# basemap
l <- leaflet() %>%
setView(lng = -115.5660,
lat = 45.4000,#44.9218,
zoom = 7.5) %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addPolylines(data = sthd_critical_WGS84, color = 'blue', weight = 1) %>%
addPolylines(data = sthd_extant_WGS84, color = 'black', opacity = 1, weight = 2)
iptds_leaflet_map <- l %>%
# add steelhead
addPolygons(data = sthd_extant_WGS84, group = 'Steelhead Populations',
fillColor = ~sth_col(MPG),
fillOpacity = .2,
stroke = TRUE, weight = 2, color = 'black', opacity = 1,
label = ~TRT_POPID
) %>%
addPolygons(data = sthd_spawn_WGS84, group = 'Spawning Areas',
fillColor = ~spawn_col(TYPE),
fillOpacity = .2,
stroke = TRUE, weight = 1, color = 'black', opacity = 1,
label = ~paste0(POP_NAME, ' - ',MSA_NAME)
) %>%
# add markers
addCircleMarkers(data = sites, group = "Population Priority", label = ~site_code,
color = ~tier_col(pop_tier),
popup = paste("<b>Site Name:</b>",sites$site_name,"</br>",
"<b>Site Code:</b>",sites$site_code,"</br>",
"<b>Population Monitoring Tier:</b>",sites$pop_tier,"</br>",
"<b>Current Funding:</b>",sites$current_om_funding,"</br>",
"<b>BPA Funding Type:</b>",sites$BPA_funded,"</br>",
"<b>Biomark Integrated Contract:</b>",sites$integrated_contract,"</br>",
"<b>Agency O&M:</b>",sites$om_agency,"</br>",
"<b>Operational:</b>",sites$operational,"</br>",
"<b>Number of Nodes:</b>",sites$node_count,"</br>",
"<b>Detection Probabilities:</b>",sites$detection_prob,"</br>")) %>%
addCircleMarkers(data = sites, group = "O&M Funding Sources", label = ~site_code,
color = ~funding_col(BPA_funded),
popup = paste("<b>Site Name:</b>",sites$site_name,"</br>",
"<b>Site Code:</b>",sites$site_code,"</br>",
"<b>Population Monitoring Tier:</b>",sites$pop_tier,"</br>",
"<b>Current Funding:</b>",sites$current_om_funding,"</br>",
"<b>BPA Funding Type:</b>",sites$BPA_funded,"</br>",
"<b>Biomark Integrated Contract:</b>",sites$integrated_contract,"</br>",
"<b>Agency O&M:</b>",sites$om_agency,"</br>",
"<b>Operational:</b>",sites$operational,"</br>",
"<b>Number of Nodes:</b>",sites$node_count,"</br>",
"<b>Detection Probabilities:</b>",sites$detection_prob,"</br>")) %>%
addCircles(data = operational_sites, group = "Operational Sites", label = ~site_code,
color = 'black', opacity = 1, radius = 50, weight = 10, fill = TRUE,
fillColor = 'black', fillOpacity = 1, stroke = TRUE,
popup = paste("<b>Site Name:</b>",sites$site_name,"</br>",
"<b>Site Code:</b>",sites$site_code,"</br>",
"<b>Population Monitoring Tier:</b>",sites$pop_tier,"</br>",
"<b>Current Funding:</b>",sites$current_om_funding,"</br>",
"<b>BPA Funding Type:</b>",sites$BPA_funded,"</br>",
"<b>Biomark Integrated Contract:</b>",sites$integrated_contract,"</br>",
"<b>Agency O&M:</b>",sites$om_agency,"</br>",
"<b>Operational:</b>",sites$operational,"</br>",
"<b>Number of Nodes:</b>",sites$node_count,"</br>",
"<b>Detection Probabilities:</b>",sites$detection_prob,"</br>")) %>%
addCircles(data = integrated_sites, group = "Integrated O&M Sites", label = ~site_code,
color = 'white', radius = 20, fillOpacity = 1) %>%
addLayersControl(
baseGroups = c('Steelhead Populations',
'Spawning Areas'),
overlayGroups = c('Spawning Areas',
"Population Priority",
"Operational Sites",
"O&M Funding Sources",
"Integrated O&M Sites"),
options = layersControlOptions(collapsed = FALSE)
) %>%
# addLegend(data = sthd_extant_WGS84, position = "bottomleft", pal = sth_col, values = ~MPG,
#           title = "Major Population Groups",
#           group = 'Steelhead Populations',
#           opacity = .5) %>%
addLegend(data = sthd_spawn_WGS84, position = "bottomleft", pal = spawn_col, values = ~TYPE,
title = "Spawning Area Type",
group = 'Spawning Areas',
opacity = .5) %>%
addLegend(data = sites, position = "bottomleft", pal = tier_col, values = ~pop_tier,
title = "Population Monitoring Priority",
group = 'Population Priority',
opacity = .5) %>%
addLegend(data = sites, position = "bottomleft", pal = funding_col, values = ~BPA_funded,
title = "O&M Funding Sources",
group = 'O&M Funding Sources',
opacity = .5) %>%
hideGroup('Spawning Areas') %>%
hideGroup('O&M Funding Sources') %>%
hideGroup('Population Priority') %>%
hideGroup('Integrated O&M Sites') %>%
#hideGroup('Operational Sites') %>%
addMiniMap()
iptds_leaflet_map
path <- file.path(getwd(), "maps", "iptds_pop_prioritization_v2.html")
htmlwidgets::saveWidget(iptds_leaflet_map, file = path)
library(leaflet)
shiny::runApp('IPTDS_planning')
runApp('IPTDS_planning')
runApp('IPTDS_planning')
getwd()
runApp('IPTDS_planning')
?includeHTML
runApp('IPTDS_planning')
runApp('IPTDS_planning')
library(shiny)
library(leaflet)
source('./R/section3.R')
runApp('IPTDS_planning')
runApp('IPTDS_planning')
getwd()
source('./R/map_prioritize.R')
runApp('IPTDS_planning')
runApp()
source('./R/map_prioritize.R')
map <- map_prioritize()
runApp()
?leafletOutput
runApp()
# load data
load('./data/points/site_config.rda')
# load data
load('./data/points/site_config.rda')
site_meta <- readxl::read_excel('./data/inputs/PIT_array_project_planning_v5.xlsx', sheet = 'IPTDS_Sites')
load('./data/inputs/steelhead_gis_data.rda')
runApp()
runApp()
load('./data/points/site_config.rda')
site_meta <- readxl::read_excel('./data/inputs/PIT_array_project_planning_v5.xlsx', sheet = 'IPTDS_Sites')
load('./data/inputs/steelhead_gis_data.rda')
map <- map_prioritize()
# data
load('./data/points/site_config.rda')
site_meta <- readxl::read_excel('./data/inputs/PIT_array_project_planning_v5.xlsx', sheet = 'IPTDS_Sites')
load('./data/inputs/steelhead_gis_data.rda')
# function
source('./R/map_prioritize.R')
iptds_plan <- map_prioritize(configuration, dabom_nodes, site_meta, sthd_critical, sthd_extant, sthd_huc, sthd_ip, sthd_spawn)
iptds_plan
runApp()
install.packages(c("actuar", "bit", "brew", "broom", "bslib", "callr", "car", "classInt", "cli", "commonmark", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "desc", "devtools", "dichromat", "digest", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "expint", "farver", "flextable", "fontawesome", "forcats", "gargle", "generics", "geojsonsf", "gert", "ggforce", "ggmap", "ggplot2", "ggrepel", "gh", "gitcreds", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jpeg", "jsonify", "jsonlite", "keyring", "knitr", "lifecycle", "lme4", "lubridate", "lwgeom", "maps", "maptools", "markdown", "MatrixModels", "minqa", "modelr", "nloptr", "officer", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "png", "polyclip", "processx", "proxy", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppEigen", "RCurl", "reactlog", "readr", "readxl", "reprex", "reticulate", "rjags", "rlang", "rmarkdown", "RODBC", "roxygen2", "rsconnect", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "sf", "shiny", "sodium", "sp", "stars", "stringi", "stringr", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tweenr", "units", "usethis", "uuid", "vctrs", "viridisLite", "vroom", "webshot", "whisker", "wk", "writexl", "xfun", "XML", "yaml", "zip", "zoo"))
shiny::runApp()
# data
load('./data/points/site_config.rda')
site_meta <- readxl::read_excel('./data/inputs/PIT_array_project_planning_v5.xlsx', sheet = 'IPTDS_Sites')
load('./data/inputs/steelhead_gis_data.rda')
# function
source('./R/map_prioritize.R')
iptds_plan <- map_prioritize(configuration, dabom_nodes, site_meta, sthd_critical, sthd_extant, sthd_huc, sthd_ip, sthd_spawn)
View(map_prioritize)
runApp()
runApp()
runApp()
# data
load('./data/points/site_config.rda')
site_meta <- readxl::read_excel('./data/inputs/PIT_array_project_planning_v5.xlsx', sheet = 'IPTDS_Sites')
load('./data/inputs/steelhead_gis_data.rda')
# process data
sites <- configuration %>%
inner_join(site_meta, by = c('site_code' = 'site'))
integrated_sites <- sites %>%
filter(integrated_contract)
operational_sites <- sites %>%
filter(operational)
# transform to WGS84 for leaflet map
sthd_critical_WGS84 <- sthd_critical %>%
st_transform('EPSG:4326')
sthd_extant_WGS84 <- sthd_extant %>%
group_by(SPECIES, RUN_TIMING, ESU_DPS, MPG, POP_NAME, TRT_POPID, POP_TYPE, ACCESS_POP) %>%
summarise(SHAPE_Area = sum(SHAPE_Area)) %>%
#filter(ACCESS_HUC == 'accessible') %>%
filter(TRT_POPID != 'CRNFC-s') %>%
st_transform('EPSG:4326')
sthd_spawn_WGS84 <- sthd_spawn %>%
st_transform('EPSG:4326')
# set colors
sth_col <- colorFactor(palette = 'viridis', domain = sthd_extant_WGS84$MPG)
spawn_col <- colorFactor(palette = c('skyblue','navy'), domain = sthd_spawn_WGS84$TYPE, reverse = TRUE)
funding_col <- colorFactor(palette = 'Dark2', domain = sites$BPA_funded)
tier_col <- colorFactor(c('firebrick', 'darkorange', 'gold'), domain = sites$pop_tier)
# basemap
l <- leaflet() %>%
setView(lng = -115.5660,
lat = 45.4000,#44.9218,
zoom = 7.5) %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addPolylines(data = sthd_critical_WGS84, color = 'blue', weight = 1) %>%
addPolylines(data = sthd_extant_WGS84, color = 'black', opacity = 1, weight = 2)
iptds_leaflet_map <- l %>%
# add steelhead
addPolygons(data = sthd_extant_WGS84, group = 'Steelhead Populations',
fillColor = ~sth_col(MPG),
fillOpacity = .2,
stroke = TRUE, weight = 2, color = 'black', opacity = 1,
label = ~TRT_POPID
) %>%
addPolygons(data = sthd_spawn_WGS84, group = 'Spawning Areas',
fillColor = ~spawn_col(TYPE),
fillOpacity = .2,
stroke = TRUE, weight = 1, color = 'black', opacity = 1,
label = ~paste0(POP_NAME, ' - ',MSA_NAME)
) %>%
# add markers
addCircleMarkers(data = sites, group = "Population Priority", label = ~site_code,
color = ~tier_col(pop_tier),
popup = paste("<b>Site Name:</b>",sites$site_name,"</br>",
"<b>Site Code:</b>",sites$site_code,"</br>",
"<b>Population Monitoring Tier:</b>",sites$pop_tier,"</br>",
"<b>Current Funding:</b>",sites$current_om_funding,"</br>",
"<b>BPA Funding Type:</b>",sites$BPA_funded,"</br>",
"<b>Biomark Integrated Contract:</b>",sites$integrated_contract,"</br>",
"<b>Agency O&M:</b>",sites$om_agency,"</br>",
"<b>Operational:</b>",sites$operational,"</br>",
"<b>Number of Nodes:</b>",sites$node_count,"</br>",
"<b>Detection Probabilities:</b>",sites$detection_prob,"</br>")) %>%
addCircleMarkers(data = sites, group = "O&M Funding Sources", label = ~site_code,
color = ~funding_col(BPA_funded),
popup = paste("<b>Site Name:</b>",sites$site_name,"</br>",
"<b>Site Code:</b>",sites$site_code,"</br>",
"<b>Population Monitoring Tier:</b>",sites$pop_tier,"</br>",
"<b>Current Funding:</b>",sites$current_om_funding,"</br>",
"<b>BPA Funding Type:</b>",sites$BPA_funded,"</br>",
"<b>Biomark Integrated Contract:</b>",sites$integrated_contract,"</br>",
"<b>Agency O&M:</b>",sites$om_agency,"</br>",
"<b>Operational:</b>",sites$operational,"</br>",
"<b>Number of Nodes:</b>",sites$node_count,"</br>",
"<b>Detection Probabilities:</b>",sites$detection_prob,"</br>")) %>%
addCircles(data = operational_sites, group = "Operational Sites", label = ~site_code,
color = 'black', opacity = 1, radius = 50, weight = 10, fill = TRUE,
fillColor = 'black', fillOpacity = 1, stroke = TRUE,
popup = paste("<b>Site Name:</b>",sites$site_name,"</br>",
"<b>Site Code:</b>",sites$site_code,"</br>",
"<b>Population Monitoring Tier:</b>",sites$pop_tier,"</br>",
"<b>Current Funding:</b>",sites$current_om_funding,"</br>",
"<b>BPA Funding Type:</b>",sites$BPA_funded,"</br>",
"<b>Biomark Integrated Contract:</b>",sites$integrated_contract,"</br>",
"<b>Agency O&M:</b>",sites$om_agency,"</br>",
"<b>Operational:</b>",sites$operational,"</br>",
"<b>Number of Nodes:</b>",sites$node_count,"</br>",
"<b>Detection Probabilities:</b>",sites$detection_prob,"</br>")) %>%
addCircles(data = integrated_sites, group = "Integrated O&M Sites", label = ~site_code,
color = 'white', radius = 20, fillOpacity = 1) %>%
addLayersControl(
baseGroups = c('Steelhead Populations',
'Spawning Areas'),
overlayGroups = c('Spawning Areas',
"Population Priority",
"Operational Sites",
"O&M Funding Sources",
"Integrated O&M Sites"),
options = layersControlOptions(collapsed = FALSE)
) %>%
# addLegend(data = sthd_extant_WGS84, position = "bottomleft", pal = sth_col, values = ~MPG,
#           title = "Major Population Groups",
#           group = 'Steelhead Populations',
#           opacity = .5) %>%
addLegend(data = sthd_spawn_WGS84, position = "bottomleft", pal = spawn_col, values = ~TYPE,
title = "Spawning Area Type",
group = 'Spawning Areas',
opacity = .5) %>%
addLegend(data = sites, position = "bottomleft", pal = tier_col, values = ~pop_tier,
title = "Population Monitoring Priority",
group = 'Population Priority',
opacity = .5) %>%
addLegend(data = sites, position = "bottomleft", pal = funding_col, values = ~BPA_funded,
title = "O&M Funding Sources",
group = 'O&M Funding Sources',
opacity = .5) %>%
hideGroup('Spawning Areas') %>%
hideGroup('O&M Funding Sources') %>%
hideGroup('Population Priority') %>%
hideGroup('Integrated O&M Sites') %>%
#hideGroup('Operational Sites') %>%
addMiniMap()
# data
load('./data/points/site_config.rda')
site_meta <- readxl::read_excel('./data/inputs/PIT_array_project_planning_v5.xlsx', sheet = 'IPTDS_Sites')
load('./data/inputs/steelhead_gis_data.rda')
# function
source('./R/map_prioritize.R')
iptds_plan <- map_prioritize(configuration, dabom_nodes, site_meta, sthd_critical, sthd_extant, sthd_huc, sthd_ip, sthd_spawn)
# data
load('./data/points/site_config.rda')
site_meta <- readxl::read_excel('./data/inputs/PIT_array_project_planning_v5.xlsx', sheet = 'IPTDS_Sites')
load('./data/inputs/steelhead_gis_data.rda')
# function
source('./R/iptds_prioritize.R')
iptds_plan <- iptds_prioritize(configuration, dabom_nodes, site_meta, sthd_critical, sthd_extant, sthd_huc, sthd_ip, sthd_spawn)
iptds_plan
iptds_plan
sites <- configuration %>%
inner_join(site_meta, by = c('site_code' = 'site'))
integrated_sites <- sites %>%
filter(integrated_contract)
operational_sites <- sites %>%
filter(operational)
# transform to WGS84 for leaflet map
sthd_critical_WGS84 <- sthd_critical %>%
st_transform('EPSG:4326')
sthd_extant_WGS84 <- sthd_extant %>%
group_by(SPECIES, RUN_TIMING, ESU_DPS, MPG, POP_NAME, TRT_POPID, POP_TYPE, ACCESS_POP) %>%
summarise(SHAPE_Area = sum(SHAPE_Area)) %>%
#filter(ACCESS_HUC == 'accessible') %>%
filter(TRT_POPID != 'CRNFC-s') %>%
st_transform('EPSG:4326')
sthd_spawn_WGS84 <- sthd_spawn %>%
st_transform('EPSG:4326')
# set colors
sth_col <- colorFactor(palette = 'viridis', domain = sthd_extant_WGS84$MPG)
spawn_col <- colorFactor(palette = c('skyblue','navy'), domain = sthd_spawn_WGS84$TYPE, reverse = TRUE)
funding_col <- colorFactor(palette = 'Dark2', domain = sites$BPA_funded)
tier_col <- colorFactor(c('firebrick', 'darkorange', 'gold'), domain = sites$pop_tier)
# basemap
l <- leaflet() %>%
setView(lng = -115.5660,
lat = 45.4000,#44.9218,
zoom = 7.5) %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addPolylines(data = sthd_critical_WGS84, color = 'blue', weight = 1) %>%
addPolylines(data = sthd_extant_WGS84, color = 'black', opacity = 1, weight = 2)
iptds_leaflet_map <- l %>%
# add steelhead
addPolygons(data = sthd_extant_WGS84, group = 'Steelhead Populations',
fillColor = ~sth_col(MPG),
fillOpacity = .2,
stroke = TRUE, weight = 2, color = 'black', opacity = 1,
label = ~TRT_POPID
) %>%
addPolygons(data = sthd_spawn_WGS84, group = 'Spawning Areas',
fillColor = ~spawn_col(TYPE),
fillOpacity = .2,
stroke = TRUE, weight = 1, color = 'black', opacity = 1,
label = ~paste0(POP_NAME, ' - ',MSA_NAME)
) %>%
# add markers
addCircleMarkers(data = sites, group = "Population Priority", label = ~site_code,
color = ~tier_col(pop_tier),
popup = paste("<b>Site Name:</b>",sites$site_name,"</br>",
"<b>Site Code:</b>",sites$site_code,"</br>",
"<b>Population Monitoring Tier:</b>",sites$pop_tier,"</br>",
"<b>Current Funding:</b>",sites$current_om_funding,"</br>",
"<b>BPA Funding Type:</b>",sites$BPA_funded,"</br>",
"<b>Biomark Integrated Contract:</b>",sites$integrated_contract,"</br>",
"<b>Agency O&M:</b>",sites$om_agency,"</br>",
"<b>Operational:</b>",sites$operational,"</br>",
"<b>Number of Nodes:</b>",sites$node_count,"</br>",
"<b>Detection Probabilities:</b>",sites$detection_prob,"</br>")) %>%
addCircleMarkers(data = sites, group = "O&M Funding Sources", label = ~site_code,
color = ~funding_col(BPA_funded),
popup = paste("<b>Site Name:</b>",sites$site_name,"</br>",
"<b>Site Code:</b>",sites$site_code,"</br>",
"<b>Population Monitoring Tier:</b>",sites$pop_tier,"</br>",
"<b>Current Funding:</b>",sites$current_om_funding,"</br>",
"<b>BPA Funding Type:</b>",sites$BPA_funded,"</br>",
"<b>Biomark Integrated Contract:</b>",sites$integrated_contract,"</br>",
"<b>Agency O&M:</b>",sites$om_agency,"</br>",
"<b>Operational:</b>",sites$operational,"</br>",
"<b>Number of Nodes:</b>",sites$node_count,"</br>",
"<b>Detection Probabilities:</b>",sites$detection_prob,"</br>")) %>%
addCircles(data = operational_sites, group = "Operational Sites", label = ~site_code,
color = 'black', opacity = 1, radius = 50, weight = 10, fill = TRUE,
fillColor = 'black', fillOpacity = 1, stroke = TRUE,
popup = paste("<b>Site Name:</b>",sites$site_name,"</br>",
"<b>Site Code:</b>",sites$site_code,"</br>",
"<b>Population Monitoring Tier:</b>",sites$pop_tier,"</br>",
"<b>Current Funding:</b>",sites$current_om_funding,"</br>",
"<b>BPA Funding Type:</b>",sites$BPA_funded,"</br>",
"<b>Biomark Integrated Contract:</b>",sites$integrated_contract,"</br>",
"<b>Agency O&M:</b>",sites$om_agency,"</br>",
"<b>Operational:</b>",sites$operational,"</br>",
"<b>Number of Nodes:</b>",sites$node_count,"</br>",
"<b>Detection Probabilities:</b>",sites$detection_prob,"</br>")) %>%
addCircles(data = integrated_sites, group = "Integrated O&M Sites", label = ~site_code,
color = 'white', radius = 20, fillOpacity = 1) %>%
addLayersControl(
baseGroups = c('Steelhead Populations',
'Spawning Areas'),
overlayGroups = c('Spawning Areas',
"Population Priority",
"Operational Sites",
"O&M Funding Sources",
"Integrated O&M Sites"),
options = layersControlOptions(collapsed = FALSE)
) %>%
# addLegend(data = sthd_extant_WGS84, position = "bottomleft", pal = sth_col, values = ~MPG,
#           title = "Major Population Groups",
#           group = 'Steelhead Populations',
#           opacity = .5) %>%
addLegend(data = sthd_spawn_WGS84, position = "bottomleft", pal = spawn_col, values = ~TYPE,
title = "Spawning Area Type",
group = 'Spawning Areas',
opacity = .5) %>%
addLegend(data = sites, position = "bottomleft", pal = tier_col, values = ~pop_tier,
title = "Population Monitoring Priority",
group = 'Population Priority',
opacity = .5) %>%
addLegend(data = sites, position = "bottomleft", pal = funding_col, values = ~BPA_funded,
title = "O&M Funding Sources",
group = 'O&M Funding Sources',
opacity = .5) %>%
hideGroup('Spawning Areas') %>%
hideGroup('O&M Funding Sources') %>%
hideGroup('Population Priority') %>%
hideGroup('Integrated O&M Sites') %>%
#hideGroup('Operational Sites') %>%
addMiniMap()
path <- file.path(getwd(), "maps", "iptds_pop_prioritization_v2.html")
htmlwidgets::saveWidget(iptds_leaflet_map, file = path)
# path <- file.path(getwd(), "maps", "iptds_pop_prioritization_v2.html")
htmlwidgets::saveWidget(iptds_leaflet_map, file = path)
?includeHTML
runApp()
runApp()
runApp()
?leafletOutput
runApp()
rsconnect::deployApp(appName = 'iptds-planning',
appDir = "C:\\Users\\tylers\\Documents\\R\\IPTDS_planning"
launch.browser = T, forceUpdate = T,
account = 'nptfisheries')
rsconnect::deployApp(appName = 'iptds-planning',
appDir = "C:\\Users\\tylers\\Documents\\R\\IPTDS_planning",
launch.browser = T, forceUpdate = T,
account = 'nptfisheries')
rsconnect::setAccountInfo(name='nptfisheries',
token='74DC59E5F1781DDBEC92B8EC739770C6',
secret='ZZr0zczKNDSZzVEzaIshFnxuAEX+8hH9VQN9DxnU')
rsconnect::deployApp(appName = 'iptds-planning',
appDir = "C:\\Users\\tylers\\Documents\\R\\IPTDS_planning",
launch.browser = T, forceUpdate = T,
account = 'nptfisheries')
runApp()
runApp()
rsconnect::deployApp(appName = 'iptds-planning',
appDir = "C:\\Users\\tylers\\Documents\\R\\IPTDS_planning",
launch.browser = T, forceUpdate = T,
account = 'nptfisheries')
rsconnect::deployApp(appName = 'iptds-planning',
appDir = "C:\\Users\\tylers\\Documents\\R\\IPTDS_planning",
launch.browser = T, forceUpdate = T,
account = 'nptfisheries')
install.packages('rgeos')
runApp()
rsconnect::deployApp(appName = 'iptds-planning',
appDir = "C:\\Users\\tylers\\Documents\\R\\IPTDS_planning",
launch.browser = T, forceUpdate = T,
account = 'nptfisheries')
rsconnect::deployApp(appName = 'iptds-planning',
appDir = "C:\\Users\\tylers\\Documents\\R\\IPTDS_planning",
launch.browser = T, forceUpdate = T,
account = 'nptfisheries')
rsconnect::deployApp(appName = 'iptds-planning',
appDir = "C:\\Users\\tylers\\Documents\\R\\IPTDS_planning",
launch.browser = T, forceUpdate = T,
account = 'nptfisheries')
library(cdmsR)
?get_P4Data
